{
    "scopeName": "source.move",
    "repository": {

        "line-comments": {
            "comment": "Single-line comment",
            "name": "comment.line.double-slash.move",
            "begin": "//",
            "end": "$"
        },

        "block-comments": {
            "comment": "Supported since https://github.com/diem/diem/pull/3714",
            "patterns": [
                {
                    "comment": "Block documentation comment",
                    "name": "comment.block.documentation.move",
                    "begin": "/\\*[\\*!](?![\\*/])",
                    "end": "\\*/"
                },
                {
                    "comment": "Block comment",
                    "name": "comment.block.move",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },

        "comments": {
            "name": "meta.comments.move",
            "patterns": [
                { "include": "#line-comments" },
                { "include": "#block-comments" }
            ]
        },

        "macros": {
            "name": "support.constant.macro.move",
            "match": "#\\[(?:[\\w0-9=_\\(\\)\\s\"]+)\\]"
        },

        "script": {
            "name": "meta.script.move",
            "begin": "\\b(script)\\b",
            "beginCaptures": {
                "1": { "name": "storage.modifier.script.move" }
            },
            "end": "(?<=})",
            "patterns": [
                { "include": "#comments" },
                {
                    "name": "meta.script_scope.move",
                    "comment": "Script scope",
                    "begin": "{",
                    "end": "}",
                    "patterns": [
                        { "include": "#const" },
                        { "include": "#comments" },
                        { "include": "#import" },
                        { "include": "#fun" }
                    ]
                }
            ]
        },

        "address": {
            "name": "meta.address_block.move",
            "comment": "Address block",
            "begin": "\\b(address)\\b",
            "end": "(?<=})",
            "beginCaptures": {
                "1": { "name": "storage.modifier.type.address.keyword.move" }
            },
            "patterns": [
                { "include": "#comments" },
                {
                    "name": "meta.address.definition.move",
                    "comment": "Address value/const",
                    "begin": "(?<=address)",
                    "end": "(?=[{])",
                    "patterns": [
                        { "include": "#comments" },
                        { "include": "#address_literal" },
                        {
                            "comment": "Named Address",
                            "name": "entity.name.type.move",
                            "match": "\\b(\\w+)\\b"
                        }
                    ]
                },
                { "include": "#module" }
            ]
        },

        "module": {
            "name": "meta.module.move",
            "comment": "Module definition",
            "begin": "\\b(module)\\b",
            "end": "(?<=})",
            "beginCaptures": {
                "1": { "name": "storage.modifier.type.move" }
            },
            "patterns": [
                { "include": "#comments" },
                {
                    "comment": "Module name",
                    "begin": "(?<=module)",
                    "end": "(?={)",
                    "patterns": [
                        { "include": "#comments" },
                        {
                            "comment": "Module namespace / address",
                            "name": "constant.other.move",
                            "begin": "(?<=module)",
                            "end": "(?=[(::){])"
                        },
                        {
                            "comment": "Module name",
                            "name": "entity.name.type.move",
                            "begin": "(?<=::)",
                            "end": "(?=[\\s{])"
                        }
                    ]
                },
                {
                    "name": "meta.module_scope.move",
                    "comment": "Module scope",
                    "begin": "{",
                    "end": "}",
                    "patterns": [
                        { "include": "#comments" },
                        { "include": "#macros" },
                        { "include": "#import" },
                        { "include": "#friend" },
                        { "include": "#const" },
                        { "include": "#struct" },
                        { "include": "#entry_fun" },
                        { "include": "#native_fun" },
                        { "include": "#public_fun" },
                        { "include": "#fun" },
                        { "include": "#move_sign"},
                        { "include": "#spec" },
                        { "include": "#block" }
                    ]
                }
            ]
        },

        "import": {
            "name": "meta.import.move",
            "begin": "\\b(use)\\b",
            "beginCaptures": {
                "1": { "name": "storage.modifier.type.move" }
            },
            "end": ";",
            "patterns": [
                { "include": "#comments" },
                { "include": "#address_literal" },
                { "include": "#as-import" },
                {
                    "comment": "Uppercase entities",
                    "match": "\\b([A-Z]\\w*)\\b",
                    "name": "entity.name.type.move"
                },
                {
                    "comment": "Module members",
                    "begin": "{",
                    "end": "}",
                    "patterns": [
                        { "include": "#comments" },
                        { "include": "#as-import" },
                        {
                            "comment": "Uppercase entities",
                            "match": "\\b([A-Z]\\w*)\\b",
                            "name": "entity.name.type.move"
                        }
                    ]
                },
                {
                    "comment": "Name of the imported module",
                    "match": "\\b(\\w+)\\b",
                    "name": "meta.entity.name.type.module.move"
                }
            ]
        },

        "friend": {
            "name": "meta.friend.move",
            "begin": "\\b(friend)\\b",
            "beginCaptures": {
                "1": { "name": "storage.modifier.type.move" }
            },
            "end": ";",
            "patterns": [
                { "include": "#comments" },
                { "include": "#address_literal" },
                {
                    "comment": "Name of the imported module",
                    "match": "\\b(\\w+)\\b",
                    "name": "entity.name.type.module.move"
                }
            ]
        },

        "const": {
            "name": "meta.const.move",
            "begin": "\\b(const)\\b",
            "beginCaptures": {
                "1": { "name": "storage.modifier.const.move" }
            },
            "end": ";",
            "patterns": [
                { "include": "#comments" },
                { "include": "#primitives" },
                { "include": "#vector" },
                { "include": "#literals" },
                {
                    "match": "\\b([\\w_]+)\\b",
                    "name": "constant.other.move"
                }
            ]
        },

        "struct": {
            "name": "meta.struct.move",
            "begin": "\\b(struct)\\b",
            "beginCaptures": {
                "1": { "name": "storage.modifier.type.move" }
            },
            "end": "(?<=})",
            "patterns": [
                { "include": "#comments" },
                {
                    "name": "meta.struct_def.move",
                    "comment": "Struct definition",
                    "begin": "(?<=struct)",
                    "end": "(?={)",
                    "patterns": [
                        { "include": "#comments" },
                        {
                            "comment": "Has Abilities",
                            "match": "\\b(has)\\b",
                            "name": "keyword.control.ability.has.move"
                        },
                        {
                            "comment": "Ability",
                            "match": "\\b(store|key|drop|copy)\\b",
                            "name": "entity.name.type.ability.move"
                        },
                        {
                            "comment": "Struct name",
                            "match": "\\b(\\w+)\\b",
                            "name": "entity.name.type.move"
                        },
                        { "include": "#type_param" }
                    ]
                },
                {
                    "name": "meta.struct_body.move",
                    "comment": "Struct body",
                    "begin": "{",
                    "end": "}",
                    "patterns": [
                        { "include": "#comments" },
                        { "include": "#self_access" },
                        { "include": "#module_access" },
                        { "include": "#types" }
                    ]
                }
            ]
        },

        "native_fun": {
            "name": "meta.native_fun.move",
            "comment": "Native function",
            "begin": "\\b(native)\\b",
            "beginCaptures": {
                "1": { "name": "storage.modifier.native.move" }
            },
            "end": "(?<=[;}])",
            "patterns": [
                { "include": "#comments" },
                {
                    "comment": "native public function",
                    "match": "\\b(public)\\b",
                    "name": "storage.modifier.public.move"
                },
                {
                    "comment": "native entry function",
                    "match": "\\b(entry)\\b",
                    "name": "storage.modifier.entry.move"
                },
                { "include": "#fun_signature" }
            ]
        },

        "public_fun": {
            "name": "meta.public_fun.move",
            "comment": "Public function",
            "begin": "\\b(public)\\b",
            "beginCaptures": {
                "1": { "name": "storage.modifier.public.move" }
            },
            "end": "(?<=[;}])",
            "patterns": [
                { "include": "#comments" },
                {
                    "comment": "Public native function",
                    "match": "\\b(native)\\b",
                    "name": "storage.modifier.native.move"
                },
                {
                    "comment": "Public entry function",
                    "match": "\\b(entry)\\b",
                    "name": "storage.modifier.entry.move"
                },
                {
                    "comment": "Script visibility",
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        { "include": "#comments" },
                        {
                            "comment": "Friend or Script visibility",
                            "match": "\\b(script|friend)\\b",
                            "name": "storage.modifier.public.script.move"
                        }
                    ]
                },
                { "include": "#fun" }
            ]
        },

        "entry_fun": {
            "name": "meta.entry_fun.move",
            "comment": "entry fun name() {}",
            "begin": "\\b(entry)\\b",
            "beginCaptures": {
                "1": { "name": "storage.modifier.entry.move" }
            },
            "end": "(?<=})",
            "patterns": [
                { "include": "#comments" },
                {
                    "comment": "entry native function",
                    "match": "\\b(native)\\b",
                    "name": "storage.modifier.native.move"
                },
                {
                    "comment": "entry public function",
                    "match": "\\b(public)\\b",
                    "name": "storage.modifier.public.move"
                },
                { "include": "#fun" }
            ]
        },

        "fun": {
            "patterns": [
                { "include": "#fun_signature" },
                { "include": "#fun_body" }
            ]
        },

        "fun_signature": {
            "name": "meta.fun_signature.move",
            "comment": "Function signature",
            "begin": "\\b(fun)\\b",
            "beginCaptures": {
                "1": { "name": "storage.modifier.fun.move" }
            },
            "end": "(?=[;{])",
            "patterns": [
                { "include": "#comments" },
                { "include": "#module_access" },
                { "include": "#types" },
                { "include": "#mut" },
                {
                    "name": "meta.function_name.move",
                    "comment": "Function name",
                    "begin": "(?<=fun)",
                    "end": "(?=[<(])",
                    "patterns": [
                        { "include": "#comments" },
                        {
                            "name": "entity.name.function.move",
                            "match": "\\b(\\w+)\\b"
                        }
                    ]
                },
                { "include": "#type_param" },
                {
                    "name": "meta.parentheses.move",
                    "comment": "Parentheses",
                    "begin": "[(]",
                    "end": "[)]",
                    "patterns": [
                        { "include": "#comments" },
                        { "include": "#self_access" },
                        { "include": "#module_access" },
                        { "include": "#types" },
                        { "include": "#mut" }
                    ]
                },
                {
                    "comment": "Keyword acquires",
                    "match": "\\b(acquires)\\b",
                    "name": "storage.modifier"
                }
            ]
        },

        "type_param": {
            "name": "meta.generic_param.move",
            "comment": "Generic type param",
            "begin": "<",
            "end": ">",
            "patterns": [
                { "include": "#comments" },
                { "include": "#phantom" },
                { "include": "#module_access" },
                {
                    "comment": "Trait-like condition",
                    "match": "\\b(store|drop|key|copy)\\b",
                    "name": "entity.name.type.kind.move"
                }
            ]
        },

        "fun_body": {
            "name": "meta.fun_body.move",
            "comment": "Function body",
            "begin": "{",
            "end": "}",
            "patterns": [
                { "include": "#comments" },
                { "include": "#import" },
                { "include": "#as" },
                { "include": "#mut" },
                { "include": "#let" },
                { "include": "#types" },
                { "include": "#assert" },
                { "include": "#literals" },
                { "include": "#control" },
                { "include": "#move_copy" },
                { "include": "#resource_methods" },
                { "include": "#self_access" },
                { "include": "#module_access" },
                { "include": "#fun_call" },
                { "include": "#spec-fun"},
                { "include": "#spec-exp"},
                { "include": "#block" }

            ]
        },

        "fun_call": {
            "name": "meta.fun_call.move",
            "comment": "Function call",
            "begin": "\\b(\\w+)\\s*(?:<[\\w\\s,]+>)?\\s*[(]",
            "beginCaptures": {
                "1": { "name": "entity.name.function.call.move" }
            },
            "end": "[)]",
            "patterns": [
                { "include": "#comments" },
                { "include": "#resource_methods" },
                { "include": "#self_access" },
                { "include": "#module_access" },
                { "include": "#move_copy" },
                { "include": "#literals" },
                { "include": "#fun_call" },
                { "include": "#block" },
                { "include": "#mut" },
                { "include": "#as" }
            ]
        },

        "block": {
            "name": "meta.block.move",
            "comment": "Block expression or definition",
            "begin": "{",
            "end": "}",
            "patterns": [
                { "include": "#comments" },
                { "include": "#as" },
                { "include": "#mut" },
                { "include": "#let" },
                { "include": "#types" },
                { "include": "#assert" },
                { "include": "#literals" },
                { "include": "#control" },
                { "include": "#move_copy" },
                { "include": "#resource_methods" },
                { "include": "#module_access" },
                { "include": "#fun_call" },
                { "include": "#block" }
            ]
        },

        "phantom": {
            "comment": "Keyword phantom inside type parameters",
            "match": "\\b(phantom)\\b",
            "name": "keyword.control.phantom.move"
        },


        "let": {
            "comment": "Keyword let",
            "match": "\\b(let)\\b",
            "name": "keyword.control.move"
        },




        "move_copy": {
            "comment": "Keywords move and copy",
            "match": "\\b(move|copy)\\b",
            "name": "variable.language.move"
        },

        "control": {
            "comment": "Control flow",
            "match": "\\b(return|while|loop|if|else|break|continue|abort)\\b",
            "name": "keyword.control.move"
        },

        "as-import": {
            "name": "meta.import_as.move",
            "comment": "Keyword as in import statement",
            "match": "\\b(as)\\b"
        },

        "as": {
            "comment": "Keyword as",
            "match": "\\b(as)\\b",
            "name": "keyword.control.move"
        },

        "mut": {
            "comment": "&mut reference",
            "match": "(?<=&)(mut)\\b",
            "name": "storage.modifier.mut.move"
        },

        "resource_methods": {
            "comment": "Methods to work with resource",
            "match": "\\b(borrow_global|borrow_global_mut|exists|move_from|move_to_sender|move_to)\\b",
            "name": "support.function.typed.move"
        },

        "assert": {
            "comment": "Assert built-in",
            "match": "\\b(assert)\\b",
            "name": "support.function.assert.move"
        },

        "self_access": {
            "name": "meta.self_access.move",
            "comment": "Use of Self",
            "match": "\\b(Self)::(\\w+)\\b",
            "captures": {
                "1": { "name": "variable.language.self.move" },
                "2": { "name": "entity.name.function.call.move" }
            }
        },

        "module_access": {
            "name": "meta.module_access.move",
            "comment": "Use of module type or method",
            "match": "\\b(\\w+)::(\\w+)\\b",
            "captures": {
                "1": { "name": "meta.entity.name.type.accessed.module.move" },
                "2": { "name": "entity.name.function.call.move" }
            }
        },

        "types": {
            "name": "meta.types.move",
            "comment": "Built-in types + vector",
            "patterns": [
                { "include": "#primitives" },
                { "include": "#vector" },
                {
                    "comment": "Capitalized type names",
                    "name": "entity.name.type",
                    "match": "\\b([A-Z][A-Za-z_]+)\\b"
                },
                {
                    "comment": "All-uppercase const literal",
                    "match": "\\b([A-Z_]+)\\b",
                    "name": "constant.other.move"
                },
                {
                    "comment": "Sign",
                    "match": "\\b(Here)\\b",
                    "name": "constant.sign.move"
                }
            ]
        },

        "vector": {
            "name": "meta.vector.move",
            "begin": "\\b(vector)<",
            "beginCaptures": {
                "1": { "name": "support.type.vector.move" }
            },
            "end": ">",
            "patterns": [
                { "include": "#primitives" },
                { "include": "#vector" }
            ]
            
        },


        "primitives": {
            "comment": "Primitive types",
            "match": "\\b(u8|u16|u32|u64|u128|u256|address|bool|signer)\\b",
            "name": "support.type.primitives.move"
        },



        "address_literal": {
            "patterns": [
                {
                    "comment": "16-byte (or shorter) hex address in Libra",
                    "match": "\\b(0x[A-Fa-f0-9][A-Fa-f0-9]{,31})\\b",
                    "name": "support.constant.diem.address.move"
                },
                {
                    "comment": "Bech32 with wallet1 prefix - Dfinance format",
                    "match": "\\b(wallet1\\w{38})",
                    "name": "support.constant.dfinance.address.move"
                },
                {
                    "comment": "Named address parameter (as build flag)",
                    "match": "\\s([@]\\w+)\\b",
                    "name": "support.constant.named.address.move"
                }
            ]
        },

        "literals": {
            "patterns": [
                {
                    "comment": "Hex literal (still to find out)",
                    "name": "constant.numeric.hex.move",
                    "match": "0x[_a-fA-F0-9]+(?:[iu](?:8|16|32|64|size))?"
                },
                {
                    "comment": "Numeric literal",
                    "name": "constant.numeric.move",
                    "match": "(?<!(?:\\w|(?:(?<!\\.)\\.)))[0-9][_0-9]*(?:\\.(?!\\.)(?:[0-9][_0-9]*)?)?(?:[eE][+\\-]?[_0-9]+)?(?:[u](?:8|64|128|))?"
                },
                {
                    "comment": "Bytearray hex literal",
                    "match": "\\b(?:h)(\"[a-fA-F0-9]+\")",
                    "captures": {
                        "1": { "name": "constant.character.move" }
                    }
                },
                {
                    "name": "meta.ascii_literal.move",
                    "comment": "ASCII Bytestring literal",
                    "begin": "\\bb\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "comment": "Special symbol escape",
                            "name": "constant.character.escape.move",
                            "match": "\\\\[nrt\\0\"]"
                        },
                        {
                            "comment": "HEX Escape",
                            "name": "constant.character.escape.hex.move",
                            "match": "\\\\x[a-fA-F0-9][A-Fa-f0-9]"
                        },
                        {
                            "comment": "ASCII Character",
                            "name": "string.quoted.double.raw.move",
                            "match": "[\\x00-\\x7F]"
                        }
                    ]
                },
                {
                    "name": "meta.hex_literal.move",
                    "comment": "vector<u8> as hex literal: x",
                    "match": "x\"([A-F0-9a-f]+)\"",
                    "captures": {
                        "1": { "name": "constant.numeric.hex.move" }
                    }
                },
                {
                    "comment": "Booleans",
                    "name": "constant.language.boolean.move",
                    "match": "\\b(?:true|false)\\b"
                },
                { "include": "#address_literal" }
            ]
        },

        "spec_block": {
            "comment": "Spec block",
            "name": "meta.spec_block.move",
            "begin": "{",
            "end": "}",
            "patterns": [
                { "include": "#comments" },
                { "include": "#spec_block" },
                { "include": "#spec_types" },
                { "include": "#fun_call" },
                { "include": "#literals" },
                { "include": "#control" },
                { "include": "#types" },
                { "include": "#let" }

            ]
        },

        "spec_keywords": {
            "match": "\\b(global|pack|unpack|pragma|native|include|ensures|requires|invariant|apply|aborts_if|modifies|use)\\b",
            "name": "keyword.control.move.spec"
        },

        "spec_define": {
            "comment": "Spec define keyword",
            "name": "meta.spec_define.move",
            "begin": "\\b(define)\\b",
            "beginCaptures": {
                "1": { "name": "keyword.control.move.spec" }
            },
            "end": "(?=[;{])",
            "patterns": [
                { "include": "#comments" },
                { "include": "#spec_types" },
                { "include": "#types" },
                {
                    "comment": "Function name",
                    "begin": "(?<=define)",
                    "end": "(?=[(])",
                    "patterns": [
                        { "include": "#comments" },
                        {
                            "name": "entity.name.function.move",
                            "match": "\\b(\\w+)\\b"
                        }
                    ]
                }
            ]
        },

        "spec_types": {
            "comment": "Spec-only types",
            "match": "\\b(range|num|vector|bool|u8|u16|u32|u64|u128|u256|address)\\b",
            "name": "support.type.vector.move"
        },

        "spec": {
            "name": "meta.spec.move",
            "begin": "\\b(spec)\\b",
            "beginCaptures": {
                "1": { "name": "storage.modifier.spec.move" }
            },
            "end": "(?<=[;}])",
            "patterns": [
                { "include": "#comments" },
                { "include": "#module_access" },
                { "include": "#types" },
                { "include": "#mut" },
                {
                    "comment": "Spec target",
                    "match": "\\b(module|schema|struct|fun)",
                    "name": "storage.modifier.spec.target.move"
                },
                {
                    "comment": "Spec define inline",
                    "match": "\\b(define)",
                    "name": "storage.modifier.spec.define.move"
                },
                {
                    "comment": "Target name",
                    "match": "\\b(\\w+)\\b",
                    "name": "entity.name.function.move"
                },
                {
                    "comment": "Spec block",
                    "begin": "{",
                    "end": "}",
                    "patterns": [
                        { "include": "#comments" },
                        { "include": "#spec_block" },
                        { "include": "#spec_types" },
                        { "include": "#spec_define" },
                        { "include": "#spec_keywords" },
                        { "include": "#control" },
                        { "include": "#fun_call" },
                        { "include": "#literals" },
                        { "include": "#types" },
                        { "include": "#let" },
                        { "include": "#spec" }
                    ]
                }
            ]
        },

        "spec-fun": {
            "name": "meta.specfun.move",
            "begin": "\\b(spec){",
            "beginCaptures": {
                "1": { "name": "storage.modifier.spec.move" }
            },
            "end": "}",
            "patterns":
                [
                    { "include": "#comments" },
                    { "include": "#spec_block" },
                    { "include": "#spec_types" },
                    { "include": "#spec_define" },
                    { "include": "#spec_keywords" },
                    { "include": "#control" },
                    { "include": "#fun_call" },
                    { "include": "#literals" },
                    { "include": "#types" },
                    { "include": "#let" }
                ]
            
        },

        "spec-exp": {
            "name": "meta.specexp.move",
            "begin": "\\b(spec)[(]",
            "beginCaptures": {
                "1": { "name": "storage.modifier.spec.move" }
            },
            "end": "[)]",
            "patterns":
                [
                    { "include": "#comments" },
                    { "include": "#spec_block" },
                    { "include": "#spec_types" },
                    { "include": "#spec_define" },
                    { "include": "#spec_keywords" },
                    { "include": "#control" },
                    { "include": "#fun_call" },
                    { "include": "#literals" },
                    { "include": "#types" },
                    { "include": "#let" }
                ]
            
        }
    },

    "patterns": [
        { "include": "#address" },
        { "include": "#comments" },
        { "include": "#module" },
        { "include": "#script" },
        { "include": "#macros" },
        { "include": "#spec" }
    ]
}
